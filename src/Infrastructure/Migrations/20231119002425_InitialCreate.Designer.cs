// <auto-generated />
using Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Infrastructure.Migrations
{
    [DbContext(typeof(DataContext))]
    [Migration("20231119002425_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Core.Models.Exercise", b =>
                {
                    b.Property<int>("ExerciseId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Relational:JsonPropertyName", "id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("ExerciseId"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "name");

                    b.Property<string>("VideoId")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasAnnotation("Relational:JsonPropertyName", "videoId");

                    b.HasKey("ExerciseId");

                    b.ToTable("Exercises");
                });

            modelBuilder.Entity("Core.Models.Workout", b =>
                {
                    b.Property<int>("WorkoutId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("WorkoutId"));

                    b.Property<string>("CooldownDescription")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Order")
                        .HasColumnType("integer");

                    b.Property<string>("ShortDescription")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("TrackName")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("WarmupDescription")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("Week")
                        .HasColumnType("integer");

                    b.HasKey("WorkoutId");

                    b.ToTable("Workouts");
                });

            modelBuilder.Entity("Core.Models.WorkoutItem", b =>
                {
                    b.Property<int>("WorkoutItemId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasAnnotation("Relational:JsonPropertyName", "id");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("WorkoutItemId"));

                    b.Property<int>("WorkoutId")
                        .HasColumnType("integer");

                    b.HasKey("WorkoutItemId");

                    b.HasIndex("WorkoutId");

                    b.ToTable("WorkoutItem");
                });

            modelBuilder.Entity("WorkoutCooldownExercises", b =>
                {
                    b.Property<int>("WarmupExercisesExerciseId")
                        .HasColumnType("integer");

                    b.Property<int>("WorkoutsWorkoutId")
                        .HasColumnType("integer");

                    b.HasKey("WarmupExercisesExerciseId", "WorkoutsWorkoutId");

                    b.HasIndex("WorkoutsWorkoutId");

                    b.ToTable("WorkoutCooldownExercises");
                });

            modelBuilder.Entity("WorkoutItemExercises", b =>
                {
                    b.Property<int>("SelectedExercisesExerciseId")
                        .HasColumnType("integer");

                    b.Property<int>("WorkoutItemsWorkoutItemId")
                        .HasColumnType("integer");

                    b.HasKey("SelectedExercisesExerciseId", "WorkoutItemsWorkoutItemId");

                    b.HasIndex("WorkoutItemsWorkoutItemId");

                    b.ToTable("WorkoutItemExercises");
                });

            modelBuilder.Entity("WorkoutWarmupExercises", b =>
                {
                    b.Property<int>("WarmupExercisesExerciseId")
                        .HasColumnType("integer");

                    b.Property<int>("WorkoutsWorkoutId")
                        .HasColumnType("integer");

                    b.HasKey("WarmupExercisesExerciseId", "WorkoutsWorkoutId");

                    b.HasIndex("WorkoutsWorkoutId");

                    b.ToTable("WorkoutWarmupExercises");
                });

            modelBuilder.Entity("Core.Models.WorkoutItem", b =>
                {
                    b.HasOne("Core.Models.Workout", null)
                        .WithMany("WorkoutItems")
                        .HasForeignKey("WorkoutId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("WorkoutCooldownExercises", b =>
                {
                    b.HasOne("Core.Models.Exercise", null)
                        .WithMany()
                        .HasForeignKey("WarmupExercisesExerciseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Models.Workout", null)
                        .WithMany()
                        .HasForeignKey("WorkoutsWorkoutId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("WorkoutItemExercises", b =>
                {
                    b.HasOne("Core.Models.Exercise", null)
                        .WithMany()
                        .HasForeignKey("SelectedExercisesExerciseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Models.WorkoutItem", null)
                        .WithMany()
                        .HasForeignKey("WorkoutItemsWorkoutItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("WorkoutWarmupExercises", b =>
                {
                    b.HasOne("Core.Models.Exercise", null)
                        .WithMany()
                        .HasForeignKey("WarmupExercisesExerciseId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Core.Models.Workout", null)
                        .WithMany()
                        .HasForeignKey("WorkoutsWorkoutId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Core.Models.Workout", b =>
                {
                    b.Navigation("WorkoutItems");
                });
#pragma warning restore 612, 618
        }
    }
}
